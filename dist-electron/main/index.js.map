{"version":3,"file":"index.js","sources":["../../electron/main/update.ts","../../electron/database/database.config.ts","../../electron/database/database.ts","../../electron/main/index.ts"],"sourcesContent":["import { app, ipcMain } from 'electron'\r\nimport { createRequire } from 'node:module'\r\nimport type {\r\n  ProgressInfo,\r\n  UpdateDownloadedEvent,\r\n  UpdateInfo,\r\n} from 'electron-updater'\r\n\r\nconst { autoUpdater } = createRequire(import.meta.url)('electron-updater');\r\n\r\nexport function update(win: Electron.BrowserWindow) {\r\n\r\n  // When set to false, the update download will be triggered through the API\r\n  autoUpdater.autoDownload = false\r\n  autoUpdater.disableWebInstaller = false\r\n  autoUpdater.allowDowngrade = false\r\n\r\n  // start check\r\n  autoUpdater.on('checking-for-update', function () { })\r\n  // update available\r\n  autoUpdater.on('update-available', (arg: UpdateInfo) => {\r\n    win.webContents.send('update-can-available', { update: true, version: app.getVersion(), newVersion: arg?.version })\r\n  })\r\n  // update not available\r\n  autoUpdater.on('update-not-available', (arg: UpdateInfo) => {\r\n    win.webContents.send('update-can-available', { update: false, version: app.getVersion(), newVersion: arg?.version })\r\n  })\r\n\r\n  // Checking for updates\r\n  ipcMain.handle('check-update', async () => {\r\n    if (!app.isPackaged) {\r\n      const error = new Error('The update feature is only available after the package.')\r\n      return { message: error.message, error }\r\n    }\r\n\r\n    try {\r\n      return await autoUpdater.checkForUpdatesAndNotify()\r\n    } catch (error) {\r\n      return { message: 'Network error', error }\r\n    }\r\n  })\r\n\r\n  // Start downloading and feedback on progress\r\n  ipcMain.handle('start-download', (event: Electron.IpcMainInvokeEvent) => {\r\n    startDownload(\r\n      (error, progressInfo) => {\r\n        if (error) {\r\n          // feedback download error message\r\n          event.sender.send('update-error', { message: error.message, error })\r\n        } else {\r\n          // feedback update progress message\r\n          event.sender.send('download-progress', progressInfo)\r\n        }\r\n      },\r\n      () => {\r\n        // feedback update downloaded message\r\n        event.sender.send('update-downloaded')\r\n      }\r\n    )\r\n  })\r\n\r\n  // Install now\r\n  ipcMain.handle('quit-and-install', () => {\r\n    autoUpdater.quitAndInstall(false, true)\r\n  })\r\n}\r\n\r\nfunction startDownload(\r\n  callback: (error: Error | null, info: ProgressInfo | null) => void,\r\n  complete: (event: UpdateDownloadedEvent) => void,\r\n) {\r\n  autoUpdater.on('download-progress', (info: ProgressInfo) => callback(null, info))\r\n  autoUpdater.on('error', (error: Error) => callback(error, null))\r\n  autoUpdater.on('update-downloaded', complete)\r\n  autoUpdater.downloadUpdate()\r\n}\r\n","export default {\r\n  HOST: \"localhost\",\r\n  USER: \"root\",\r\n  PASSWORD: undefined,\r\n  DATABASE: \"my_electron_app\",\r\n};\r\n","import { app, dialog, ipcMain } from \"electron\";\r\nimport databaseConfig from \"./database.config\";\r\nimport mysql from \"mysql2\";\r\n\r\nexport const setupDatabase = () => {\r\n  const connection = mysql.createConnection({\r\n    host: databaseConfig.HOST,\r\n    user: databaseConfig.USER,\r\n    password: databaseConfig.PASSWORD,\r\n    database: databaseConfig.DATABASE,\r\n  });\r\n\r\n  connection.connect((error) => {\r\n    if (error) {\r\n      console.error(\"Database connection failed: \", error);\r\n      dialog.showErrorBox(\"Database connection failed\", error.message);\r\n      app.quit();\r\n    } else {\r\n      console.log(\"Database connected successfully\");\r\n    }\r\n  });\r\n\r\n  ipcMain.on(\r\n    \"execute-query\",\r\n    async (event, query: string, values: unknown[], requestId: string) => {\r\n      connection.query(query, values, (error, results) => {\r\n        if (error) {\r\n          event.reply(requestId, {\r\n            error: error.message || \"Unknown error\",\r\n          });\r\n        }\r\n        event.reply(requestId, results);\r\n      });\r\n    }\r\n  );\r\n};\r\n","import { app, BrowserWindow, shell, ipcMain } from \"electron\";\r\nimport { release } from \"node:os\";\r\nimport { dirname, join } from \"node:path\";\r\nimport { fileURLToPath } from \"node:url\";\r\nimport { update } from \"./update\";\r\nimport { setupDatabase } from \"../database/database\";\r\nimport crypto from \"crypto\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\n// Database setup\r\nsetupDatabase();\r\n\r\n// generateSessionToken\r\nfunction generateSessionToken(): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    crypto.randomBytes(32, (err: Error | null, buffer: Buffer) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        const token = buffer.toString(\"hex\");\r\n        resolve(token);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nipcMain.handle(\"generateSessionToken\", async () => {\r\n  const token = await generateSessionToken();\r\n  return token;\r\n});\r\n\r\nfunction validatePassword(password: string, hash: string): Promise<boolean> {\r\n  return bcrypt.compare(password, hash);\r\n}\r\n\r\nipcMain.handle(\r\n  \"validatePassword\",\r\n  async (_, password: string, hash: string) => {\r\n    return validatePassword(password, hash);\r\n  }\r\n);\r\n\r\nfunction hashPassword(password: string): Promise<string> {\r\n  return bcrypt.hash(password, 10);\r\n}\r\n\r\nipcMain.handle(\"hashPassword\", async (_, password: string) => {\r\n  return hashPassword(password);\r\n});\r\n\r\nglobalThis.__filename = fileURLToPath(import.meta.url);\r\nglobalThis.__dirname = dirname(__filename);\r\n\r\n// The built directory structure\r\n//\r\n// ├─┬ dist-electron\r\n// │ ├─┬ main\r\n// │ │ └── index.js    > Electron-Main\r\n// │ └─┬ preload\r\n// │   └── index.mjs    > Preload-Scripts\r\n// ├─┬ dist\r\n// │ └── index.html    > Electron-Renderer\r\n//\r\nprocess.env.DIST_ELECTRON = join(__dirname, \"../\");\r\nprocess.env.DIST = join(process.env.DIST_ELECTRON, \"../dist\");\r\nprocess.env.VITE_PUBLIC = process.env.VITE_DEV_SERVER_URL\r\n  ? join(process.env.DIST_ELECTRON, \"../public\")\r\n  : process.env.DIST;\r\n\r\n// Disable GPU Acceleration for Windows 7\r\nif (release().startsWith(\"6.1\")) app.disableHardwareAcceleration();\r\n\r\n// Set application name for Windows 10+ notifications\r\nif (process.platform === \"win32\") app.setAppUserModelId(app.getName());\r\n\r\nif (!app.requestSingleInstanceLock()) {\r\n  app.quit();\r\n  process.exit(0);\r\n}\r\n\r\n// Remove electron security warnings\r\n// This warning only shows in development mode\r\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\r\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\r\n\r\nlet win: BrowserWindow | null = null;\r\n// Here, you can also use other preload\r\nconst preload = join(__dirname, \"../preload/index.mjs\");\r\nconst url = process.env.VITE_DEV_SERVER_URL;\r\nconst indexHtml = join(process.env.DIST, \"index.html\");\r\n\r\nasync function createWindow() {\r\n  win = new BrowserWindow({\r\n    title: \"Main window\",\r\n    icon: join(process.env.VITE_PUBLIC, \"favicon.ico\"),\r\n    webPreferences: {\r\n      preload,\r\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\r\n      // nodeIntegration: true,\r\n\r\n      // Consider using contextBridge.exposeInMainWorld\r\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\r\n      // contextIsolation: false,\r\n    },\r\n  });\r\n\r\n  if (url) {\r\n    // electron-vite-vue#298\r\n    win.loadURL(url);\r\n    // Open devTool if the app is not packaged\r\n    win.webContents.openDevTools();\r\n  } else {\r\n    win.loadFile(indexHtml);\r\n  }\r\n\r\n  // Test actively push message to the Electron-Renderer\r\n  win.webContents.on(\"did-finish-load\", () => {\r\n    win?.webContents.send(\"main-process-message\", new Date().toLocaleString());\r\n  });\r\n\r\n  // Make all links open with the browser, not with the application\r\n  win.webContents.setWindowOpenHandler(({ url }) => {\r\n    if (url.startsWith(\"https:\")) shell.openExternal(url);\r\n    return { action: \"deny\" };\r\n  });\r\n\r\n  // Apply electron-updater\r\n  update(win);\r\n}\r\n\r\napp.whenReady().then(createWindow);\r\n\r\napp.on(\"window-all-closed\", () => {\r\n  win = null;\r\n  if (process.platform !== \"darwin\") app.quit();\r\n});\r\n\r\napp.on(\"second-instance\", () => {\r\n  if (win) {\r\n    // Focus on the main window if the user tried to open another\r\n    if (win.isMinimized()) win.restore();\r\n    win.focus();\r\n  }\r\n});\r\n\r\napp.on(\"activate\", () => {\r\n  const allWindows = BrowserWindow.getAllWindows();\r\n  if (allWindows.length) {\r\n    allWindows[0].focus();\r\n  } else {\r\n    createWindow();\r\n  }\r\n});\r\n\r\n// New window example arg: new windows url\r\nipcMain.handle(\"open-win\", (_, arg) => {\r\n  const childWindow = new BrowserWindow({\r\n    webPreferences: {\r\n      preload,\r\n      nodeIntegration: true,\r\n      contextIsolation: false,\r\n    },\r\n  });\r\n\r\n  if (process.env.VITE_DEV_SERVER_URL) {\r\n    childWindow.loadURL(`${url}#${arg}`);\r\n  } else {\r\n    childWindow.loadFile(indexHtml, { hash: arg });\r\n  }\r\n});\r\n"],"names":["win","url"],"mappings":"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"}