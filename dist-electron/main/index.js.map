{"version":3,"file":"index.js","sources":["../../electron/backendQueries.ts","../../electron/database/database.ts","../../electron/main/index.ts"],"sourcesContent":["import { ipcMain } from \"electron\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport const backendQueries = () => {\r\n\tasync function validatePassword(\r\n\t\tpassword: string,\r\n\t\thash: string\r\n\t): Promise<{ success: boolean }> {\r\n\t\tlet passwordMatch = await bcrypt.compare(password, hash);\r\n\r\n\t\tif (passwordMatch) {\r\n\t\t\treturn { success: true };\r\n\t\t} else {\r\n\t\t\treturn { success: false };\r\n\t\t}\r\n\t}\r\n\r\n\tipcMain.on(\"validatePassword\", async (event, password, hashedPassword) => {\r\n\t\tconst validPassword = await validatePassword(password, hashedPassword);\r\n\t\tevent.sender.send(\"validatePasswordResponse\", validPassword);\r\n\t});\r\n\r\n\tfunction hashPassword(password: string): Promise<string> {\r\n\t\treturn bcrypt.hash(password, 10);\r\n\t}\r\n\r\n\tipcMain.on(\"hashPassword\", async (event, password) => {\r\n\t\tconst hashedPassword = await hashPassword(password);\r\n\t\tevent.sender.send(\"hashedPasswordGenerated\", hashedPassword);\r\n\t});\r\n};\r\n","import { app, ipcMain } from \"electron\";\r\nimport mongoose from \"mongoose\";\r\nimport { c } from \"vite/dist/node/types.d-aGj9QkWt\";\r\n\r\nexport const database = () => {\r\n\tconst userSchema = new mongoose.Schema({\r\n\t\tusername: { type: String, required: true },\r\n\t\tpassword: { type: String, required: true },\r\n\t\tfirst_name: { type: String, required: true },\r\n\t\tlast_name: { type: String, required: true },\r\n\t\tuser_role: { type: String, required: true },\r\n\t});\r\n\r\n\tconst productSchema = new mongoose.Schema({\r\n\t\tsku: { type: String, required: true },\r\n\t\tname: { type: String, required: true },\r\n\t\tdescription: { type: String, required: true },\r\n\t\tcategory_id: { type: mongoose.Schema.Types.ObjectId, required: true },\r\n\t\tbrand: { type: String, required: true },\r\n\t});\r\n\r\n\tconst productVariationSchema = new mongoose.Schema({\r\n\t\tparent_product_id: {\r\n\t\t\ttype: mongoose.Schema.Types.ObjectId,\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tsku: { type: String, required: true },\r\n\t\tname: { type: String, required: true },\r\n\t\tprice: { type: Number, required: true },\r\n\t\tstock_per_location: { type: Array<stock_per_location>, required: true },\r\n\t\tmin_stock: { type: Number, required: true },\r\n\t\t// location: { type: String, required: true },\r\n\t\tstatus: { type: Boolean, required: true },\r\n\t\tvariations: { type: Object, required: true },\r\n\t});\r\n\r\n\tconst LocationSchema = new mongoose.Schema({\r\n\t\tname: { type: String, required: true },\r\n\t\taddress: { type: String, required: true },\r\n\t\tcontact_info: { type: String, required: true },\r\n\t});\r\n\r\n\tconst CategorySchema = new mongoose.Schema({\r\n\t\tname: { type: String, required: true },\r\n\t\taddress: { type: String, required: true },\r\n\t\tproperties: { type: Array, required: true },\r\n\t});\r\n\r\n\ttype stock_per_location = {\r\n\t\tlocation: string;\r\n\t\tstock: number;\r\n\t};\r\n\r\n\t// Database setup\r\n\tconst uri = \"mongodb://localhost:27017/aioims\";\r\n\r\n\tmongoose\r\n\t\t.connect(uri)\r\n\t\t.then(() => console.log(\"Connected to MongoDB successfully!\"))\r\n\t\t.catch((error) => {\r\n\t\t\tconsole.error(\"Error connecting to MongoDB:\", error);\r\n\t\t\tapp.quit();\r\n\t\t});\r\n\r\n\tconsole.log(\"Database connected successfully\");\r\n\r\n\t// find query\r\n\tipcMain.on(\r\n\t\t\"mongodb-find-query\",\r\n\t\tasync (\r\n\t\t\tevent,\r\n\t\t\tqueryObject: {\r\n\t\t\t\tcollection: string;\r\n\t\t\t\tschemaString: string;\r\n\t\t\t\tquery: any;\r\n\t\t\t\tprojection?: any;\r\n\t\t\t}\r\n\t\t) => {\r\n\t\t\ttry {\r\n\t\t\t\tconst { collection, schemaString, query, projection } =\r\n\t\t\t\t\tqueryObject;\r\n\r\n\t\t\t\t// handle Schema Selection\r\n\t\t\t\tconst schema = selectSchema(schemaString);\r\n\r\n\t\t\t\tconst model: mongoose.Model<any> = mongoose.model(\r\n\t\t\t\t\tcollection,\r\n\t\t\t\t\tschema\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst rawResults = await model.find(query, projection);\r\n\r\n\t\t\t\t// loop through results, and return a new array of objects, but convert the _id to a string\r\n\t\t\t\t// console.log(\"collection:\", collection);\r\n\t\t\t\t// console.log(\"schemaString:\", schemaString);\r\n\t\t\t\t// console.log(\"schema:\", schema);\r\n\t\t\t\t// console.log(\"query:\", query);\r\n\t\t\t\t// console.log(\"projection:\", projection);\r\n\t\t\t\t// console.log(rawResults);\r\n\r\n\t\t\t\tconst results = await rawResults.map((result: any) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tid: result._id.toString(),\r\n\t\t\t\t\t\t...result,\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\t\tevent.sender.send(\"mongodb-find-query-response\", {\r\n\t\t\t\t\tresults,\r\n\t\t\t\t});\r\n\t\t\t} catch (error: any) {\r\n\t\t\t\tconsole.error(\"Error running MongoDB query:\", error);\r\n\t\t\t\tevent.sender.send(\"mongodb-find-query-response\", {\r\n\t\t\t\t\terror,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\t// findProducts query\r\n\tipcMain.on(\r\n\t\t\"mongodb-findProducts-query\",\r\n\t\tasync (\r\n\t\t\tevent,\r\n\t\t\tqueryObject: {\r\n\t\t\t\tcollection: string;\r\n\t\t\t\tschemaString: string;\r\n\t\t\t\tquery: any;\r\n\t\t\t\tprojection?: any;\r\n\t\t\t}\r\n\t\t) => {\r\n\t\t\ttry {\r\n\t\t\t\tconst { collection, schemaString, query, projection } =\r\n\t\t\t\t\tqueryObject;\r\n\r\n\t\t\t\t// handle Schema Selection\r\n\t\t\t\tconst schema = selectSchema(schemaString);\r\n\r\n\t\t\t\tconst model: mongoose.Model<any> = mongoose.model(\r\n\t\t\t\t\tcollection,\r\n\t\t\t\t\tschema\r\n\t\t\t\t);\r\n\r\n\t\t\t\tquery._id = { $in: query._id.map((id: string) => id) };\r\n\r\n\t\t\t\tconst rawResults = await model.find(query, projection);\r\n\r\n\t\t\t\t// loop through results, and return a new array of objects, but convert the _id to a string\r\n\t\t\t\t// console.log(\"collection:\", collection);\r\n\t\t\t\t// console.log(\"schemaString:\", schemaString);\r\n\t\t\t\t// console.log(\"schema:\", schema);\r\n\t\t\t\tconsole.log(\"query:\", query);\r\n\t\t\t\t// console.log(\"projection:\", projection);\r\n\t\t\t\t// console.log(rawResults);\r\n\r\n\t\t\t\tconst results = await rawResults.map((result: any) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tid: result._id.toString(),\r\n\t\t\t\t\t\tsku: result.sku,\r\n\t\t\t\t\t\tname: result.name,\r\n\t\t\t\t\t\tdescription: result.description,\r\n\t\t\t\t\t\tcategory_id: result.category_id.toString(),\r\n\t\t\t\t\t\tbrand: result.brand,\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\t\tevent.sender.send(\"mongodb-findProducts-query-response\", {\r\n\t\t\t\t\tresults,\r\n\t\t\t\t});\r\n\t\t\t} catch (error: any) {\r\n\t\t\t\tconsole.error(\"Error running MongoDB query:\", error);\r\n\t\t\t\tevent.sender.send(\"mongodb-findProducts-query-response\", {\r\n\t\t\t\t\terror,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\t// getVariationParents query\r\n\t// ipcMain.on(\r\n\t// \t\"mongodb-getVariationParents-query\",\r\n\t// \tasync (\r\n\t// \t\tevent,\r\n\t// \t\tqueryObject: {\r\n\t// \t\t\tcollection: string;\r\n\t// \t\t\tschemaString: string;\r\n\t// \t\t\tquery: any;\r\n\t// \t\t\tprojection?: any;\r\n\t// \t\t}\r\n\t// \t) => {\r\n\t// \t\ttry {\r\n\t// \t\t\tconst { collection, schemaString, query, projection } =\r\n\t// \t\t\t\tqueryObject;\r\n\r\n\t// \t\t\t// handle Schema Selection\r\n\t// \t\t\tconst schema = selectSchema(schemaString);\r\n\r\n\t// \t\t\tconst model: mongoose.Model<any> = mongoose.model(\r\n\t// \t\t\t\tcollection,\r\n\t// \t\t\t\tschema\r\n\t// \t\t\t);\r\n\r\n\t// \t\t\tquery._id = { $in: query._id.map((id: string) => id) };\r\n\r\n\t// \t\t\tconst rawResults = await model.find(query, projection);\r\n\r\n\t// \t\t\t// loop through results, and return a new array of objects, but convert the _id to a string\r\n\t// \t\t\t// console.log(\"collection:\", collection);\r\n\t// \t\t\t// console.log(\"schemaString:\", schemaString);\r\n\t// \t\t\t// console.log(\"schema:\", schema);\r\n\t// \t\t\t// console.log(\"query:\", query);\r\n\t// \t\t\t// console.log(\"projection:\", projection);\r\n\t// \t\t\tconsole.log(rawResults);\r\n\r\n\t// \t\t\tconst results = await rawResults.map((result: any) => {\r\n\t// \t\t\t\treturn {\r\n\t// \t\t\t\t\tid: result._id.toString(),\r\n\t// \t\t\t\t\t...result,\r\n\t// \t\t\t\t};\r\n\t// \t\t\t});\r\n\r\n\t// \t\t\tevent.sender.send(\r\n\t// \t\t\t\t\"mongodb-getVariationParents-query-response\",\r\n\t// \t\t\t\t{\r\n\t// \t\t\t\t\tresults,\r\n\t// \t\t\t\t}\r\n\t// \t\t\t);\r\n\t// \t\t} catch (error: any) {\r\n\t// \t\t\tconsole.error(\"Error running MongoDB query:\", error);\r\n\t// \t\t\tevent.sender.send(\r\n\t// \t\t\t\t\"mongodb-getVariationParents-query-response\",\r\n\t// \t\t\t\t{\r\n\t// \t\t\t\t\terror,\r\n\t// \t\t\t\t}\r\n\t// \t\t\t);\r\n\t// \t\t}\r\n\t// \t}\r\n\t// );\r\n\r\n\t// getProductVariants query\r\n\tipcMain.on(\r\n\t\t\"mongodb-getProductVariants-query\",\r\n\t\tasync (\r\n\t\t\tevent,\r\n\t\t\tqueryObject: {\r\n\t\t\t\tcollection: string;\r\n\t\t\t\tschemaString: string;\r\n\t\t\t\tquery: any;\r\n\t\t\t\tprojection?: any;\r\n\t\t\t}\r\n\t\t) => {\r\n\t\t\ttry {\r\n\t\t\t\tconst { collection, schemaString, query, projection } =\r\n\t\t\t\t\tqueryObject;\r\n\r\n\t\t\t\t// handle Schema Selection\r\n\t\t\t\tconst schema = selectSchema(schemaString);\r\n\r\n\t\t\t\tconst variantModel: mongoose.Model<any> = mongoose.model(\r\n\t\t\t\t\tcollection,\r\n\t\t\t\t\tschema\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst productModel: mongoose.Model<any> = mongoose.model(\r\n\t\t\t\t\t\"products\",\r\n\t\t\t\t\tproductSchema\r\n\t\t\t\t);\r\n\r\n\t\t\t\tlet rawResults;\r\n\r\n\t\t\t\t// console.log(\"query:\", query);\r\n\r\n\t\t\t\tif (query.name !== \"\" && query.name !== undefined) {\r\n\t\t\t\t\tconst filter = {\r\n\t\t\t\t\t\t$or: [\r\n\t\t\t\t\t\t\t{ name: { $regex: new RegExp(query.name, \"i\") } },\r\n\t\t\t\t\t\t\t{ sku: { $regex: new RegExp(query.name, \"i\") } },\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t};\r\n\t\t\t\t\trawResults = await variantModel.find(filter, projection);\r\n\r\n\t\t\t\t\tif (rawResults.length === 0) {\r\n\t\t\t\t\t\tconst altFilter = {\r\n\t\t\t\t\t\t\t$or: [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: {\r\n\t\t\t\t\t\t\t\t\t\t$regex: new RegExp(query.name, \"i\"),\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tdescription: {\r\n\t\t\t\t\t\t\t\t\t\t$regex: new RegExp(query.name, \"i\"),\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tbrand: {\r\n\t\t\t\t\t\t\t\t\t\t$regex: new RegExp(query.name, \"i\"),\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tlet parent_prod_result: string[] = await productModel\r\n\t\t\t\t\t\t\t.find(altFilter, { _id: 1 })\r\n\t\t\t\t\t\t\t.then((products) =>\r\n\t\t\t\t\t\t\t\tproducts.map((product) => product._id)\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tconsole.log(\"parent_prod_result\", parent_prod_result);\r\n\r\n\t\t\t\t\t\tif (parent_prod_result.length != 0) {\r\n\t\t\t\t\t\t\tquery.parent_product_id = {\r\n\t\t\t\t\t\t\t\t$in: parent_prod_result,\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\tdelete query.name;\r\n\r\n\t\t\t\t\t\t\trawResults = await variantModel.find(\r\n\t\t\t\t\t\t\t\tquery,\r\n\t\t\t\t\t\t\t\tprojection\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// query all\r\n\t\t\t\t\tdelete query.name;\r\n\t\t\t\t\trawResults = await variantModel.find(query, projection);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// const rawResults = await variantModel.find(query, projection);\r\n\t\t\t\tconsole.log(\"variantquery\", query);\r\n\t\t\t\tconsole.log(\"variantraw\", rawResults);\r\n\t\t\t\tconst results = await rawResults.map((result: any) => {\r\n\t\t\t\t\t// console.log(result);\r\n\t\t\t\t\t// price: 4.5,\r\n\t\t\t\t\t// min_stock: 15,\r\n\t\t\t\t\t// location: [ new ObjectId('6616c400e830a6258e4e09ac') ],\r\n\t\t\t\t\t// status: true,\r\n\t\t\t\t\t// name: 'Phillips Stainless Steel Head Screw (M6, Fine)',\r\n\t\t\t\t\t// sku: 'PSSM620',\r\n\t\t\t\t\t// variations: {\r\n\t\t\t\t\t//   Length: '20mm',\r\n\t\t\t\t\t//   Material: 'Stainless Steel',\r\n\t\t\t\t\t//   Size: 'M6',\r\n\t\t\t\t\t//   'Thread Type': 'Fine'\r\n\t\t\t\t\t// },\r\n\t\t\t\t\t// console.log(\"variations:\", {\r\n\t\t\t\t\t// \tid: result._id.toString(),\r\n\t\t\t\t\t// \tparent_product_id: result.parent_product_id.toString(),\r\n\t\t\t\t\t// \tstock_per_locations: result.stock_per_location.map(\r\n\t\t\t\t\t// \t\t(item: any) => {\r\n\t\t\t\t\t// \t\t\treturn {\r\n\t\t\t\t\t// \t\t\t\tlocation: item.location.toString(),\r\n\t\t\t\t\t// \t\t\t\tstock: item.stock,\r\n\t\t\t\t\t// \t\t\t};\r\n\t\t\t\t\t// \t\t}\r\n\t\t\t\t\t// \t),\r\n\t\t\t\t\t// \tprice: result.price,\r\n\t\t\t\t\t// \tmin_stock: result.min_stock,\r\n\t\t\t\t\t// \tstatus: result.status,\r\n\t\t\t\t\t// \tname: result.name,\r\n\t\t\t\t\t// \tsku: result.sku,\r\n\t\t\t\t\t// \tvariations: result.variations,\r\n\t\t\t\t\t// });\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tid: result._id.toString(),\r\n\t\t\t\t\t\tparent_product_id: result.parent_product_id.toString(),\r\n\t\t\t\t\t\tstock_per_location: result.stock_per_location.map(\r\n\t\t\t\t\t\t\t(item: any) => {\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tlocation: item.location.toString(),\r\n\t\t\t\t\t\t\t\t\tstock: item.stock,\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\tprice: result.price,\r\n\t\t\t\t\t\tmin_stock: result.min_stock,\r\n\t\t\t\t\t\tstatus: result.status,\r\n\t\t\t\t\t\tname: result.name,\r\n\t\t\t\t\t\tsku: result.sku,\r\n\t\t\t\t\t\tvariations: result.variations,\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\t\tevent.sender.send(\"mongodb-getProductVariants-query-response\", {\r\n\t\t\t\t\tresults,\r\n\t\t\t\t});\r\n\t\t\t} catch (error: any) {\r\n\t\t\t\tconsole.error(\"Error running MongoDB query:\", error);\r\n\t\t\t\tevent.sender.send(\"mongodb-getProductVariants-query-response\", {\r\n\t\t\t\t\terror,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\t// getProductLocations query\r\n\tipcMain.on(\r\n\t\t\"mongodb-getProductLocations-query\",\r\n\t\tasync (\r\n\t\t\tevent,\r\n\t\t\tqueryObject: {\r\n\t\t\t\tcollection: string;\r\n\t\t\t\tschemaString: string;\r\n\t\t\t\tquery: any;\r\n\t\t\t\tprojection?: any;\r\n\t\t\t}\r\n\t\t) => {\r\n\t\t\ttry {\r\n\t\t\t\tconst { collection, schemaString, query, projection } =\r\n\t\t\t\t\tqueryObject;\r\n\r\n\t\t\t\t// handle Schema Selection\r\n\t\t\t\tconst schema = selectSchema(schemaString);\r\n\r\n\t\t\t\tconst model: mongoose.Model<any> = mongoose.model(\r\n\t\t\t\t\tcollection,\r\n\t\t\t\t\tschema\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst rawResults = await model.find(query, projection);\r\n\r\n\t\t\t\t// console.log(\"raw\", rawResults);\r\n\t\t\t\tconst results = await rawResults.map((result: any) => {\r\n\t\t\t\t\t// console.log(result);\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tid: result._id.toString(),\r\n\t\t\t\t\t\tname: result.name,\r\n\t\t\t\t\t\taddress: result.address,\r\n\t\t\t\t\t\tcontact_info: result.contact_info,\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\t\tevent.sender.send(\r\n\t\t\t\t\t\"mongodb-getProductLocations-query-response\",\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresults,\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t} catch (error: any) {\r\n\t\t\t\tconsole.error(\"Error running MongoDB query:\", error);\r\n\t\t\t\tevent.sender.send(\r\n\t\t\t\t\t\"mongodb-getProductLocations-query-response\",\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\terror,\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\t// getProductCategories query\r\n\tipcMain.on(\r\n\t\t\"mongodb-getProductCategories-query\",\r\n\t\tasync (\r\n\t\t\tevent,\r\n\t\t\tqueryObject: {\r\n\t\t\t\tcollection: string;\r\n\t\t\t\tschemaString: string;\r\n\t\t\t\tquery: any;\r\n\t\t\t\tprojection?: any;\r\n\t\t\t}\r\n\t\t) => {\r\n\t\t\ttry {\r\n\t\t\t\tconst { collection, schemaString, query, projection } =\r\n\t\t\t\t\tqueryObject;\r\n\r\n\t\t\t\t// handle Schema Selection\r\n\t\t\t\tconst schema = selectSchema(schemaString);\r\n\r\n\t\t\t\tconst model: mongoose.Model<any> = mongoose.model(\r\n\t\t\t\t\tcollection,\r\n\t\t\t\t\tschema\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst rawResults = await model.find(query, projection);\r\n\r\n\t\t\t\tconsole.log(\"raw\", rawResults);\r\n\t\t\t\tconst results = await rawResults.map((result: any) => {\r\n\t\t\t\t\t// console.log(result);\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tid: result._id.toString(),\r\n\t\t\t\t\t\tname: result.name,\r\n\t\t\t\t\t\tproperties: [...result.properties],\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\t\tevent.sender.send(\r\n\t\t\t\t\t\"mongodb-getProductCategories-query-response\",\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresults,\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t} catch (error: any) {\r\n\t\t\t\tconsole.error(\"Error running MongoDB query:\", error);\r\n\t\t\t\tevent.sender.send(\r\n\t\t\t\t\t\"mongodb-getProductCategories-query-response\",\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\terror,\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\t// create query\r\n\tipcMain.on(\r\n\t\t\"mongodb-create-query\",\r\n\t\tasync (\r\n\t\t\tevent,\r\n\t\t\tqueryObject: {\r\n\t\t\t\tcollection: string;\r\n\t\t\t\tschemaString: string;\r\n\t\t\t\tdocument: any;\r\n\t\t\t\tprojection?: any;\r\n\t\t\t}\r\n\t\t) => {\r\n\t\t\ttry {\r\n\t\t\t\tconst { collection, schemaString, document } = queryObject;\r\n\r\n\t\t\t\t// handle Schema Selection\r\n\t\t\t\tconst schema = await selectSchema(schemaString);\r\n\r\n\t\t\t\tconst model = await mongoose.model(collection, schema);\r\n\r\n\t\t\t\tawait model.create(document);\r\n\r\n\t\t\t\tawait event.sender.send(\"mongodb-create-query-response\", true);\r\n\t\t\t} catch (error: any) {\r\n\t\t\t\tconsole.error(\"Error running MongoDB query:\", error);\r\n\t\t\t\tevent.sender.send(\"mongodb-create-query-response\", {\r\n\t\t\t\t\terror,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\t// update query\r\n\tipcMain.on(\r\n\t\t\"mongodb-update-query\",\r\n\t\tasync (\r\n\t\t\tevent,\r\n\t\t\tqueryObject: {\r\n\t\t\t\tcollection: string;\r\n\t\t\t\tschemaString: string;\r\n\t\t\t\tdocument: any;\r\n\t\t\t\tprojection?: any;\r\n\t\t\t}\r\n\t\t) => {\r\n\t\t\ttry {\r\n\t\t\t\tconst { collection, schemaString, document } = queryObject;\r\n\r\n\t\t\t\t// handle Schema Selection\r\n\t\t\t\tconst schema = await selectSchema(schemaString);\r\n\r\n\t\t\t\tconst model = await mongoose.model(collection, schema);\r\n\r\n\t\t\t\tawait model.findOneAndUpdate(\r\n\t\t\t\t\t{ _id: document.id },\r\n\t\t\t\t\tdocument,\r\n\t\t\t\t\t{}\r\n\t\t\t\t);\r\n\r\n\t\t\t\tawait event.sender.send(\"mongodb-update-query-response\", true);\r\n\t\t\t} catch (error: any) {\r\n\t\t\t\tconsole.error(\"Error running MongoDB query:\", error);\r\n\t\t\t\tevent.sender.send(\"mongodb-update-query-response\", {\r\n\t\t\t\t\terror,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\t// delete query\r\n\tipcMain.on(\r\n\t\t\"mongodb-delete-query\",\r\n\t\tasync (\r\n\t\t\tevent,\r\n\t\t\tqueryObject: {\r\n\t\t\t\tcollection: string;\r\n\t\t\t\tschemaString: string;\r\n\t\t\t\tdocument: any;\r\n\t\t\t\tprojection?: any;\r\n\t\t\t}\r\n\t\t) => {\r\n\t\t\ttry {\r\n\t\t\t\tconst { collection, schemaString, document } = queryObject;\r\n\r\n\t\t\t\t// handle Schema Selection\r\n\t\t\t\tconst schema = await selectSchema(schemaString);\r\n\r\n\t\t\t\tconst model = await mongoose.model(collection, schema);\r\n\r\n\t\t\t\tawait model.findByIdAndDelete({ _id: document.id });\r\n\r\n\t\t\t\tawait event.sender.send(\"mongodb-delete-query-response\", true);\r\n\t\t\t} catch (error: any) {\r\n\t\t\t\tconsole.error(\"Error running MongoDB query:\", error);\r\n\t\t\t\tevent.sender.send(\"mongodb-delete-query-response\", {\r\n\t\t\t\t\terror,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\tfunction selectSchema(schemaString: string) {\r\n\t\t// Implement logic to select schema based on string (e.g., userSchema, productSchema)\r\n\t\t// You can use a switch statement or a mapping object for different schema names\r\n\t\tif (schemaString === \"UserSchema\") {\r\n\t\t\treturn userSchema;\r\n\t\t} else if (schemaString === \"ProductSchema\") {\r\n\t\t\t// Implement Product Schema\r\n\t\t\treturn productSchema;\r\n\t\t} else if (schemaString === \"ProductVariationSchema\") {\r\n\t\t\t// Implement Product Variation Schema\r\n\t\t\treturn productVariationSchema;\r\n\t\t} else if (schemaString === \"LocationSchema\") {\r\n\t\t\t// Implement Location Schema\r\n\t\t\treturn LocationSchema;\r\n\t\t} else if (schemaString === \"CategorySchema\") {\r\n\t\t\t// Implement CategorySchema\r\n\t\t\treturn CategorySchema;\r\n\t\t} else {\r\n\t\t\tthrow new Error(`Unsupported schema: ${schemaString}`);\r\n\t\t}\r\n\t}\r\n};\r\n","import { app, BrowserWindow, shell, ipcMain } from \"electron\";\r\nimport { release } from \"node:os\";\r\nimport { dirname, join } from \"node:path\";\r\nimport { fileURLToPath } from \"node:url\";\r\nimport { backendQueries } from \"../backendQueries\";\r\nimport { database } from \"../database/database\";\r\n\r\n// Database setup\r\ndatabase();\r\n\r\n// User Queries\r\nbackendQueries();\r\n\r\nglobalThis.__filename = fileURLToPath(import.meta.url);\r\nglobalThis.__dirname = dirname(__filename);\r\n\r\n// The built directory structure\r\n//\r\n// ├─┬ dist-electron\r\n// │ ├─┬ main\r\n// │ │ └── index.js    > Electron-Main\r\n// │ └─┬ preload\r\n// │   └── index.mjs    > Preload-Scripts\r\n// ├─┬ dist\r\n// │ └── index.html    > Electron-Renderer\r\n//\r\nprocess.env.DIST_ELECTRON = join(__dirname, \"../\");\r\nprocess.env.DIST = join(process.env.DIST_ELECTRON, \"../dist\");\r\nprocess.env.VITE_PUBLIC = process.env.VITE_DEV_SERVER_URL\r\n\t? join(process.env.DIST_ELECTRON, \"../public\")\r\n\t: process.env.DIST;\r\n\r\n// Disable GPU Acceleration for Windows 7\r\nif (release().startsWith(\"6.1\")) app.disableHardwareAcceleration();\r\n\r\n// Set application name for Windows 10+ notifications\r\nif (process.platform === \"win32\") app.setAppUserModelId(app.getName());\r\n\r\nif (!app.requestSingleInstanceLock()) {\r\n\tapp.quit();\r\n\tprocess.exit(0);\r\n}\r\n\r\n// Remove electron security warnings\r\n// This warning only shows in development mode\r\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\r\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\r\n\r\nlet win: BrowserWindow | null = null;\r\n// Here, you can also use other preload\r\nconst preload = join(__dirname, \"../preload/index.mjs\");\r\nconst url = process.env.VITE_DEV_SERVER_URL;\r\nconst indexHtml = join(process.env.DIST, \"index.html\");\r\n\r\nasync function createWindow() {\r\n\twin = new BrowserWindow({\r\n\t\ttitle: \"Main window\",\r\n\t\ticon: join(process.env.VITE_PUBLIC, \"favicon.ico\"),\r\n\t\twebPreferences: {\r\n\t\t\tpreload,\r\n\t\t\t// Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\r\n\t\t\t// nodeIntegration: true,\r\n\r\n\t\t\t// Consider using contextBridge.exposeInMainWorld\r\n\t\t\t// Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\r\n\t\t\t// contextIsolation: false,\r\n\t\t},\r\n\t});\r\n\r\n\tif (url) {\r\n\t\t// electron-vite-vue#298\r\n\t\twin.loadURL(url);\r\n\t\t// Open devTool if the app is not packaged\r\n\t\t// win.webContents.openDevTools();\r\n\t\twin.maximize();\r\n\t} else {\r\n\t\twin.loadFile(indexHtml);\r\n\t}\r\n\r\n\t// Test actively push message to the Electron-Renderer\r\n\twin.webContents.on(\"did-finish-load\", () => {\r\n\t\twin?.webContents.send(\r\n\t\t\t\"main-process-message\",\r\n\t\t\tnew Date().toLocaleString()\r\n\t\t);\r\n\t\t// win?.webContents.send(\"clear-storage\");\r\n\t});\r\n\r\n\t// Make all links open with the browser, not with the application\r\n\twin.webContents.setWindowOpenHandler(({ url }) => {\r\n\t\tif (url.startsWith(\"https:\")) shell.openExternal(url);\r\n\t\treturn { action: \"deny\" };\r\n\t});\r\n}\r\n\r\napp.whenReady().then(createWindow);\r\n\r\napp.on(\"window-all-closed\", async () => {\r\n\twin = null;\r\n\tif (process.platform !== \"darwin\") app.quit();\r\n});\r\n\r\napp.on(\"second-instance\", () => {\r\n\tif (win) {\r\n\t\t// Focus on the main window if the user tried to open another\r\n\t\tif (win.isMinimized()) win.restore();\r\n\t\twin.focus();\r\n\t}\r\n});\r\n\r\napp.on(\"activate\", () => {\r\n\tconst allWindows = BrowserWindow.getAllWindows();\r\n\tif (allWindows.length) {\r\n\t\tallWindows[0].focus();\r\n\t} else {\r\n\t\tcreateWindow();\r\n\t}\r\n});\r\n\r\nipcMain.handle(\"open-win\", (_, arg) => {\r\n\tconst childWindow = new BrowserWindow({\r\n\t\twebPreferences: {\r\n\t\t\tpreload,\r\n\t\t\tnodeIntegration: true,\r\n\t\t\tcontextIsolation: false,\r\n\t\t},\r\n\t});\r\n\r\n\tif (process.env.VITE_DEV_SERVER_URL) {\r\n\t\tchildWindow.loadURL(`${url}#${arg}`);\r\n\t} else {\r\n\t\tchildWindow.loadFile(indexHtml, { hash: arg });\r\n\t}\r\n});\r\n\r\napp.on(\"activate\", () => {\r\n\tconst allWindows = BrowserWindow.getAllWindows();\r\n\tif (allWindows.length) {\r\n\t\tallWindows[0].focus();\r\n\t} else {\r\n\t\tcreateWindow();\r\n\t}\r\n});\r\n"],"names":["url"],"mappings":"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"}